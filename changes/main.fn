
;; Check if this is the first run to create the CHANGELOG.md file.
(set first false)
(when-not (path:exists "CHANGELOG.md")
    (set first true))

;; Get version and validate it.
(set version "0.0.0")
(when-not (first)
    (set version (trim (array:last (split "v" (array:first (split "-" (array:first (split "\n" (file:read "CHANGELOG.md")))))))))
    (assert (version) "Version value not found in CHANGELOG.md")

    (set tmp (split "." (version)))
    (assert (eq? 3 (tmp.length)) "Version value required to be of the format: \x1B[97mmajor.minor.patch\x1B[0m")
    (assert (all x (tmp) (re:matches "/^\d+$/" (x))) "Version should be all integers, found: \x1B[97m(version)\x1B[0m")
    (echo "\x1B[90mLast version found is: v(version)\x1B[0m")
)

;; Get git changelog and get all marked commits up to the last version.
(sys:exec "git log -n 50 >changes.txt")
(set data (file:read "changes.txt"))

(set found false)
(set blocks [])
(set changes null)

(for (split "\n" (data))
    (set i (trim (i)))

    (when (eq? (i) "v(version)")
        (set found true)
        (break))

    (when (starts-with? "commit " (i))
        (set changes [])
        (array:unshift (blocks) (changes))
        (continue)
    )

    ;; A marked commit can be:
    ;;  - [tag] text
    ;;  [tag] text
    ;;  - text
    (set tmp (re:match `/^- \\[([^\\]]+)\] (.+)$/` (i)))
    (when-not (tmp.0)
        (set tmp (re:match `/^\\[([^\\]]+)\] (.+)$/` (i)))
        (when-not (tmp.0)
            (set tmp (re:match `/^- (.+)$/` (i)))
            (when-not (tmp.0) (continue))
            (set tmp ["" "General" (tmp.1)])
        )
    )

    (array:push (changes) { name (tmp.1) text (tmp.2) })
)

(set changes [])
(for (blocks)
    (for (i)
        (array:push (changes) (i))
    )
)

(when (and (not (first)) (not (found)))
    (throw "Previous version commit not found, expecting single-line message: \x1B[93mv(version)\x1B[0m"))

(when (zero? (changes.length))
    (throw "Found no changes to record."))

(echo "")

;; Increase version number.
(set version (split "." (version)))
(inc version.(- (version.length) 1))
(set version (join "." (version)))

;; Group commit messages by tag.
(set list {})

(for (changes)
    (when-not (in? (list) (i.name))
        (set list.(i.name) []))
    (array:push (list.(i.name)) (i.text))
)

;; Generate markdown output.
(append out (concat "# v" (version) " - " (datetime:format (datetime:now) "%b %d %Y") "\n\n"))

(for (list)
    (echo "\x1B[97m#### (i#)\x1B[0m")
    (append out "#### (i#)\n")

    (for (i)
        (echo "\x1B[90m- (i)\x1B[0m")
        (append out "- (i)\n")
    )

    (append out "\n")
)

(append out "<br/>\n\n")

;; Prepend changes to changes log file.
(when-not (eq? (args.1) "view")
    (file:write "CHANGELOG.md" (concat (out) (file:read "CHANGELOG.md"))))

(file:remove "changes.txt")
(echo "\n\x1B[92mâœ” CHANGELOG.md updated to: \x1B[97mv(version)\x1B[0m")
