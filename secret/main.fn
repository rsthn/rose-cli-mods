;;
;;	Secret Management Utility
;;
;;	Copyright (c) 2023-2024, RedStar Technologies, All rights reserved.
;;	https://rsthn.com/
;;
;;	THIS UTILITY IS PROVIDED BY REDSTAR TECHNOLOGIES "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
;;	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
;;	PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL REDSTAR TECHNOLOGIES BE LIABLE FOR ANY
;;	DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
;;	NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
;;	OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
;;	STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
;;	USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;

(when (lt (args.length) 2)
    (echo "Use: ")
    (echo "  :secret genkey [<bit-size>] - Generates a key of the specified size \(default is 4096\).")
    (echo "  :secret hash <file> - Returns the SHA-512 hash of the file.")
    (echo "  :secret wrap <file> <key-file> - Wraps a file with the specified key.")
    (echo "  :secret unwrap <file> <key-file> - Unwraps a file using the specified key.")
    (stop))

(when (eq "genkey" (args.1))
    (set bitsize (or (int (args.2)) 4096))
    (echo (utils::randstr-base64 (div (bitsize) 8)))
    (stop)
)

(when (eq "hash" (args.1))
    (assert (ge (args.length) 3) "Parameters missing: file")
    (echo (utils::hash "sha512" (file::read (args.2))))
    (stop)
)

(when (eq "wrap" (args.1))
    (assert (ge (args.length) 3) "Parameters missing: file, key-file")
    (assert (ge (args.length) 4) "Parameters missing: key-file")
    (assert (path::exists (args.2)) "File does not exist: (args.2)")
    (assert (path::exists (args.3)) "Key file not found: (args.3)")

    (echo "Loading key \e[35m(args.3)\e[0m ...")
    (set key (utils::base64::decode (file::read (args.3))))

    (echo "Wrapping file \e[32m(args.2)\e[0m [(file::size (args.2)) bytes] ...")
    (set data (file::read (args.2)))
    (set data (eax::encrypt (key) (data)))
    (file::write "(args.2).secret" (data))
    (file::remove (args.2))
    (echo "Done writing \e[91m(args.2).secret\e[0m [(file::size '(args.2).secret') bytes].")

    (stop)
)

(when (eq "unwrap" (args.1))
    (assert (ge (args.length) 3) "Parameters missing: file, key-file")
    (assert (ge (args.length) 4) "Parameters missing: key-file")
    (assert (path::exists (args.2)) "File does not exist: (args.2)")
    (assert (path::exists (args.3)) "Key file not found: (args.3)")
    
    (assert (ends-with ".secret" (args.2)) "File must have suffix .secret: (args.2)")
    (set tmp (substr 0 -7 (args.2)))

    (echo "Loading key \e[35m(args.3)\e[0m ...")
    (set key (utils::base64::decode (file::read (args.3))))

    (echo "Unwrapping file \e[91m(args.2)\e[0m [(file::size (args.2)) bytes] ...")
    (set data (file::read (args.2)))
    (set data (eax::decrypt (key) (data)))
    (file::write "(tmp)" (data))
    (file::remove (args.2))
    (echo "Done writing \e[32m(tmp)\e[0m [(file::size '(tmp)') bytes].")

    (stop)
)

(echo "Invalid command: (args.1)")
