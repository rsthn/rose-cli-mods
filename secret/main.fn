
(when (lt? (args.length) 2)
    (echo "Use: ")
    (echo "  :secret genkey [<bit-size>] - Generates a key of the specified size \(default is 4096\).")
    (echo "  :secret hash <file> - Returns the SHA-512 hash of the file.")
    (echo "  :secret wrap <file> <key-file> - Wraps a file with the specified key.")
    (echo "  :secret unwrap <file> <key-file> - Unwraps a file using the specified key.")
    (stop))

(when (eq? "genkey" (args.1))
    (set bitsize (or (int (args.2)) 4096))
    (echo (base64:encode (crypto:random-bytes (div (bitsize) 8))))
    (stop)
)

(when (eq? "hash" (args.1))
    (assert (ge? (args.length) 3) "Parameters missing: \e[97mfile\e[0m")
    (echo (crypto:hash "sha512" (file:read (args.2))))
    (stop)
)

(when (eq? "wrap" (args.1))
    (assert (ge? (args.length) 3) "Parameters missing: \e[97mfile, key-file\e[0m")
    (assert (ge? (args.length) 4) "Parameters missing: \e[97mkey-file\e[0m")
    (assert (path:exists (args.2)) "File does not exist: \e[97m(args.2)\e[0m")
    (assert (path:exists (args.3)) "Key file not found: \e[97m(args.3)\e[0m")

    (echo "Loading key \e[95m(args.3)\e[0m ...")
    (set key (base64:decode (file:read (args.3))))

    (echo "Wrapping file \e[96m(args.2)\e[0m [(file:size (args.2)) bytes] ...")
    (set data (file:read (args.2)))
    (set data (eax:encrypt (key) (data)))
    (file:write "(args.2).secret" (data))
    (file:remove (args.2))
    (echo "Done writing \e[92m(args.2).secret\e[0m [(file:size '(args.2).secret') bytes].")

    (stop)
)

(when (eq? "unwrap" (args.1))
    (assert (ge? (args.length) 3) "Parameters missing: \e[97mfile, key-file\e[0m")
    (assert (ge? (args.length) 4) "Parameters missing: \e[97mkey-file\e[0m")
    (assert (path:exists (args.2)) "File does not exist: \e[97m(args.2)\e[0m")
    (assert (path:exists (args.3)) "Key file not found: \e[97m(args.3)\e[0m")
    
    (assert (ends-with? ".secret" (args.2)) "File must have suffix .secret: \e[97m(args.2)\e[0m")
    (set tmp (substr 0 -7 (args.2)))

    (echo "Loading key \e[35m(args.3)\e[0m ...")
    (set key (base64:decode (file:read (args.3))))

    (echo "Unwrapping file \e[96m(args.2)\e[0m [(file:size (args.2)) bytes] ...")
    (set data (file:read (args.2)))
    (set data (eax:decrypt (key) (data)))
    (file:write "(tmp)" (data))
    (file:remove (args.2))
    (echo "Done writing \e[92m(tmp)\e[0m [(file:size '(tmp)') bytes].")

    (stop)
)

(echo "Invalid command: \e[97m(args.1)\e[0m")
