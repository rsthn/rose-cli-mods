
(def-fn clr value
	"\x1B[(value)m")

(def-fn val def-value
	(? (eq "" (local.value))
		(def-value)
		(expand (local.value) (local.vars))))

(def-fn rcopy source target

	(set tmp (dir::entries:recursive (source)))

	(set files (pipe
		(tmp.files)
		(map _ (substr (len (source)) (i.path)))
	))

	(set dirs (pipe
		(tmp.dirs)
		(map _ (substr (len (source)) (i.path)))
	))

	(for (dirs)
		(dir::create "(target)(i)"))

	(for (files)
		(file::copy "(source)(i)" "(target)(i)"))

	(& files (files.length) dirs (dirs.length))
)

(def-fn interpret

	(switch (upper (local.x.1))

		case ECHO
			(echo (val ""))

		case LOAD:STRICT
			(set value (val ".config"))
			(when-not (path::exists (value)) (throw "Input file (value) not found."))

		case LOAD
			(set value (val ".config"))
			(when (path::exists (value)) (map::assign (local.vars.storage) (utils::json::parse (file::read (value)))))

		case STORE
			(set value (val ".config"))
			(file::write (value) (utils::json::prettify (local.vars.storage)))

		case EXEC
			(set local.vars.errorlevel (utils::exec (val "")))

		case CHDIR
			(path::chdir (val null))

		case PUSHD
			(array::push (local.vars.cwd) (path::cwd))

		case POPD
			(set value (array::pop (local.vars.cwd)))
			(path::chdir (value))

		case MKDIR
			(dir::create (val null))

		case RMDIR
			(dir::remove (val null) true)

		case DEL
			(file::remove (val ""))

		case RCOPY
			(set value (rcopy (local.vars.r0) (val null)))
			(echo "- Copied (value.files) files, (value.dirs) dirs")

		case REPLACE
			(set value (val null))
			(file::write (value) (replace (local.vars.r0) (local.vars.r1) (file::read (value))))

		case WRITE
			(set value (val null))
			(file::write (value) (local.vars.r0))

		case STOP
			(throw "@STOP")

		case IF
			(if (val false)
				(array::push (local.state) EXEC-IF)
			else
				(array::push (local.state) FIND-ELSE))

		case ELIF
			(throw "Unexpected ELIF, current state: (array::last (local.state))")
		case ELSE
			(throw "Unexpected ELSE, current state: (array::last (local.state))")
		case END-IF
			(throw "Unexpected END-IF, current state: (array::last (local.state))")

		default
			(set local.vars.(local.x.1) (val ""))
	)
)

(set vars (&
	storage (&)
	cwd (#)
))

(path::chdir (path::dirname (args.0)))

(when-not (path::exists ".deploy")
	(throw "Deployment file `.deploy` not found."))

(set state (# DEF))
(set lineno 0)

(try
	(for line (trim (split "\n" (file::read ".deploy")))

		(inc lineno)

		(when (or (eq '' (line)) (starts-with "#" (line)))
			(continue))

		(set x (re::match `/^(.+?)(\s.+)?$/` (line)))
		(set value (trim (x.2)))

		(switch (array::last (state))

			case DEF
				(interpret)

			case EXEC-IF
				(switch (upper (x.1))
					case ELSE
						(array::pop (state))
						(array::push (state) FIND-END-IF)
					case END-IF
						(array::pop (state))
					default
						(interpret)
				)

			case FIND-ELSE
				(switch (upper (x.1))
					case IF
						(array::push (state) FIND-END-IF)
					case ELIF
						(if (val false)
							(array::pop (state))
							(array::push (state) EXEC-IF)
						)
					case ELSE
						(array::pop (state))
						(array::push (state) EXEC-IF)
					case END-IF
						(array::pop (state))
				)

			case FIND-END-IF
				(switch (upper (x.1))
					case IF
						(array::push (state) FIND-END-IF)
					case END-IF
						(array::pop (state))
				)
		)
	)

catch
	(switch (err)
		case "@STOP"
		default throw "line (lineno): (err)")
	)
)

(null)
